plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'application'
    id 'signing'
    id 'maven'
}

group 'com.webank'
version '3.3.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def solcVersion = rootProject.hasProperty('solcVersion') ? solcVersion : "0.8.11.0"

repositories {
    mavenCentral()
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/"}
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenLocal()
}

def log4j_version="2.16.0"
List logger = [
        "org.apache.logging.log4j:log4j-api:$log4j_version",
        "org.apache.logging.log4j:log4j-core:$log4j_version",
        "org.apache.logging.log4j:log4j-to-slf4j:$log4j_version",
]

dependencies {    
    compile logger
    implementation ('com.webank:solc-gradle-plugin:3.3.0-SNAPSHOT')
    compile ('org.fisco-bcos.java-sdk:fisco-bcos-java-sdk:3.3.0')
    compile('org.fisco-bcos.code-generator:bcos-code-generator:1.1.0') {
        exclude group: "org.fisco-bcos.java-sdk"
        exclude group: "org.slf4j"
    }
    implementation group: 'info.picocli', name: 'picocli', version: '4.6.1'
    implementation ("org.slf4j:slf4j-api:1.7.30")
    implementation "org.fisco-bcos:solcJ:${solcVersion}"
//    implementation group: 'com.squareup', name: 'javapoet', version: '1.13.0'
}


shadowJar {
    mainClassName = 'com.webank.scaffold.Main'
    destinationDirectory = file('dist')
    archiveFileName = project.name+'.jar'

    exclude '**/*.DSA'
    exclude '**/*.RSA'
    exclude '**/*.SF'
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    
    from("./"){
        include 'build.gradle'
    }
}

clean {
    println "delete ${projectDir}/dist"
    delete "${projectDir}/dist"
}
javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

jar {
    baseName = project.name
    destinationDir file('dist/app')
    archiveName project.name + "-" + version + ".jar"

    exclude '**/*.xml'
    exclude '**/*.properties'

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
    }
}
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}
////
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
////
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
//                authentication(userName: sonatypeUsername, password: sonatypePassword)
//            }
//
//            pom.project {
//                name = project.name
//                packaging ='jar'
//                description ='SmartDev-Scaffold SDK'
//                url= 'https://github.com/WeBankBlockchain/SmartDev-Scaffold'
//
//                scm {
//                    url ='scm:git@github.com:WeBankBlockchain/SmartDev-Scaffold.git'
//                    connection ='scm:git@github.com:WeBankBlockchain/SmartDev-Scaffold.git'
//                    developerConnection = 'git@github.com:WeBankBlockchain/SmartDev-Scaffold.git'
//                }
//
//                licenses {
//                    license {
//                        name ='Apache License, Version 2.0'
//                        url ='http://www.apache.org/licenses/LICENSE-2.0.txt'
//                        distribution = 'repo'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id = 'aaronchu'
//                        name ='aaronchu'
//                    }
//                }
//            }
//        }
//    }
//}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}